version: "3.9"

services:

    web:
        image: nginx:latest
        container_name: nginx
        restart: always
        ports:
            - "80:80"
        volumes:
            - ./src:/var/www
            - ./build/nginx:/etc/nginx/conf.d
            - ./log/nginx:/var/log/nginx
        networks:
            - public
        depends_on:
            - api
            - worker
        env_file:
            - .env
        tty: true

    #  varnish:
    #    image: varnish
    #    container_name: varnish
    #    restart: always
    #    ports:
    #      - "80:80"
    #    networks:
    #      - public
    #    environment:
    #      - VARNISH_SIZE=2G
    #    depends_on:
    #      - web
    #    links:
    #      - web
    #    volumes:
    #      - ./build/varnish/default.vcl:/etc/varnish/default.vcl:ro
    #    tty: true

    memcached:
        image: memcached:latest
        ports:
            - "11211:11211"

    api:
        build:
            args:
                user: api
                uid: 1000
            dockerfile: Dockerfile
            context: ./src/api/
        container_name: api
        restart: always
        volumes:
            - ./src/api:/var/www/api
        healthcheck:
            test: [ "CMD", "netstat", "-apn", "|", "grep", "9000" ]
            interval: 1m30s
            timeout: 10s
            retries: 3
            start_period: 40s
        links:
            - db
            - memcached:memcached
        networks:
            - public
        env_file:
            - .env
        tty: true

    mock:
        build:
            dockerfile: Dockerfile
            context: ./src/mock/
        container_name: mock
        restart: always
        volumes:
            - ./src/mock:/var/www/mock
        links:
            - memcached:memcached
        networks:
            - public
        env_file:
            - .env
        tty: true

    worker:
        build:
            args:
                user: worker
                uid: 1000
            dockerfile: Dockerfile
            context: ./src/worker/
        container_name: worker
        restart: always
        volumes:
            - ./src/worker:/var/www/worker
        networks:
            - public
        env_file:
            - .env
        tty: true

    db:
        image: mysql
        container_name: db
        restart: unless-stopped
        command: --default-authentication-plugin=mysql_native_password
        environment:
            MYSQL_DATABASE: ${DB_DATABASE}
            MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
            MYSQL_PASSWORD: ${DB_PASSWORD}
            MYSQL_USER: ${DB_USERNAME}
            SERVICE_TAGS: dev
            SERVICE_NAME: mysql
        volumes:
            - ./build/mysql/docker:/docker-entrypoint-initdb.d
            - ./build/mysql/data:/var/lib/mysql
        ports:
            - "3306:3306"
        networks:
            - public

    redis:
        image: redis
        container_name: redis
        restart: always
        hostname: redis
        #    env_file:
        #     - server/.env
        #    volumes:
        #     - application:/data/redis
        ports:
            - 6379:6379
        networks:
            - public
        tty: true

networks:
    public:
        driver: bridge
    private:
        driver: bridge
